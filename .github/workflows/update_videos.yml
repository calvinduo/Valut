name: Hourly Content Update

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:      # Allows manual triggering

jobs:
  update-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write    # Explicitly set permissions for repo operations
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4    # Using latest version
        with:
          fetch-depth: 1             # Only fetch the latest commit to speed up
      
      - name: Create download directory
        run: mkdir -p downloads
      
      - name: Download content
        run: |
          curl -L -o downloads/videos.txt https://gentle-dream-6173.calvinduo.workers.dev/videos.txt
          if [ $? -ne 0 ]; then
            echo "Failed to download content"
            exit 1
          fi
      
      - name: Check if content is different
        id: check_changes
        run: |
          if [ ! -f videos.txt ]; then
            echo "First time download"
            cp downloads/videos.txt videos.txt
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          elif ! cmp -s downloads/videos.txt videos.txt; then
            echo "Changes detected"
            cp downloads/videos.txt videos.txt
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push if changed
        if: steps.check_changes.outputs.changes_detected == 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add videos.txt
          git commit -m "Auto update videos.txt [skip ci]"
          
          # Try to push changes with retry logic
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if git push; then
              echo "Successfully pushed changes"
              break
            else
              retry_count=$((retry_count + 1))
              if [ $retry_count -eq $max_retries ]; then
                echo "Failed to push after $max_retries attempts"
                exit 1
              fi
              echo "Push failed, attempt $retry_count of $max_retries. Retrying..."
              git pull --rebase
              sleep 5
            fi
          done
